#!/bin/bash
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Library General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor Boston, MA 02110-1301,  USA


wwwdisk="@wwwdisk@"
www="@www@"

wms_srs='EPSG:900913 EPSG:4326 EPSG:3857';
myprojection='
    PROJECTION
     "init=epsg:4326"
     "proj=longlat"
     "ellps=WGS84"
     "datum=WGS84"
     "no_defs"
     ""
    END

';

###############################################################################
## @brief function to add a layer to the mapfile
##
## @param name      the name of the product ie: 925hgt
## @param kmlfile   kml file to test for hilo
## @param grid      optional name to prefix onto the kml name
##
## @details
## global vars
## @param wwwdisk   the base web dir to write to "/var/www/html/"
## @param www       the base url for the website
## @param dsname    name of the dataset
##
###############################################################################

appendmapfile () {
    local name="$1"
    local kmlfile="$2"
    local grid="$3"
    
    local mapfile="${wwwdisk}/kml/${dsname}/${dsname}.map"
    local myname="${name}"
    local group=""
    local groupmeta=""
    
    ##### lock the file #####
    
    local lock="$locdir/$script.$dsname.lock"
    
    while ! mkdir "$lock" > /dev/null
    do
        sleep 1
    done
    
    ##### if the mapfile is not created, create one #####
    
    if ! [ -f "$mapfile" ]
    then
        mkrootmapfile
        mkcgibin
    fi
    
    ##### find the linenum of the last END in the mapfile #####
    
    local linenum
    linenum=$(cat "$mapfile" |\
               grep -n -e "^[ ]*END[ ]*$" |\
               tail -n 1 |\
               cut -d ":" -f 1
             )



    ###### just contours? #####
    
    if ! ogrinfo "$kmlfile" -so | grep -q HiLo
    then
        
        ##### grid set? #####
        
        if [ -n "$grid" ]
        then
            groupmeta="'wms_group_title'  '${name}'"
            group="GROUP '${name}'"
            myname="${name}_${grid}"
        fi
        
        ##### is the layer already in there? #####
        
        if ! grep "$mapfile" -e "NAME \"${myname}\""
        then
                
            ed -s "$mapfile" << EOF
${linenum}-1a
 
  LAYER
    NAME "${myname}"
    STATUS ON
    TYPE LINE
    CONNECTIONTYPE OGR
    CONNECTION "%RUN%/${myname}%HOUR%.kmz"

    DATA "contour"
    
    STATUS ON
    DUMP TRUE

    ${myprojection}
    
    ${group}
    
    METADATA
      'wms_title'        '${myname}'
      'wms_srs'          '${wms_srs}'
      'wms_extent'       '-180 -90 180 90'
      $groupmeta
    END

    # This enables use of colors and styles from the source file.
    STYLEITEM "AUTO"

    # Define an empty class that will be filled at runtime from the color and
    # styles read on each shape in the source file.
    CLASS
    #  COLOR 0 0 255
    END

  END

.
w
EOF
        fi
    
        ##### contours and hilo #####
        
    elif ogrinfo "$kmlfile" -so | grep -q HiLo
    then
        
        groupmeta="'wms_group_title'  '${name}'"
        group="GROUP '${name}'"
        
        ##### grid set? #####
        
        if [ -n "$grid" ]
        then
            myname="${name}_${grid}"
        fi
        
        ##### is the layer already in there? #####
        
        if ! grep "$mapfile" -e "NAME \"${myname}_c\""
        then
            
            ed -s "$mapfile" << EOF
${linenum}-1a

  LAYER
    NAME "${myname}_c"
    STATUS ON
    TYPE LINE
    CONNECTIONTYPE OGR
    CONNECTION "%RUN%/${myname}%HOUR%.kmz"
    VALIDATION
      'run'     '^([0-9]+|latest)$'
      'hour'    '^[0-9]+$'
    END
    
    DATA "contour"
    
    $group
    
    METADATA
      'wms_title'        '${myname}_c'
      'wms_srs'          '${wms_srs}'
      'wms_extent'       '-180 -90 180 90'
      $groupmeta
    END

    # This enables use of colors and styles from the source file.
    STYLEITEM "AUTO"
    
    # Define an empty class that will be filled at runtime from the color and
    # styles read on each shape in the source file.
    CLASS
    #  COLOR 0 0 255
    END

  END  # layer

  LAYER
    NAME "${myname}_h"
    STATUS ON
    TYPE POINT
    CONNECTIONTYPE OGR
    CONNECTION "%RUN%/${myname}%HOUR%.kmz"
    VALIDATION
      'run'     '^([0-9]+|latest)$'
      'hour'    '^[0-9]+$'
    END
    
    DATA "HiLo"

    $group

    METADATA
      'wms_title'        '${myname}_h'
      'wms_srs'          '${wms_srs}'
      'wms_extent'       '-180 -90 180 90'
      $groupmeta
    END

    # This enables use of colors and styles from the source file.
    STYLEITEM "AUTO"

    # Define an empty class that will be filled at runtime from the color and
    # styles read on each shape in the source file.
    CLASS
    #  COLOR 0 0 255
    END

  END  # layer

.
w
EOF
        fi
    fi
    
    ##### remove the lock #####
    
    rmdir "$lock"
    
}

###############################################################################
## @brief function to create the cgibin file
#!/bin/sh
#

mkcgibin () {

    cat > "${wwwdisk}../cgi-bin/${dsname}_wms" << EOF

MS_MAPFILE="${wwwdisk}/kml/${dsname}/${dsname}.map"

#MS_ERRORFILE=""${wwwdisk}/kml/${dsname}/mapserver.error"
#MS_DEBUGLEVEL="5"

LIBKML_WRAPDATELINE=yes
LIBKML_RESOLVE_STYLE=yes

export LIBKML_WRAPDATELINE
export LIBKML_RESOLVE_STYLE

export MS_MAPFILE

#export MS_ERRORFILE
#export MS_DEBUGLEVEL

./mapserv
EOF

}

###############################################################################
## @brief function to create the root geoext file
##
## @details
## global vars
## @param wwwdisk   the base web dir to write to "/var/www/html/"
## @param www       the base url for the website
## @param dsname    name of the dataset
##
###############################################################################

mkrootmapfile () {
    local name="$1"
    
    local wms="${www}/cgi-bin/${dsname}_wms"
    

    cat > "${wwwdisk}/kml/${dsname}/${dsname}.map" << EOF
MAP
  NAME "${dsname}"
  # Map image size

  SIZE 512 512
  UNITS dd

########  WEST       SOUTH     EAST      NORTH

  EXTENT -180.0  -90.0 180.00  90.0
  
  ${myprojection}

  # Background color for the map canvas -- change as desired
  IMAGECOLOR 0 0 0
  IMAGEQUALITY 95
  IMAGETYPE png


  OUTPUTFORMAT
    NAME GTiff
    DRIVER "GDAL/GTiff"
    MIMETYPE "image/tiff"
    IMAGEMODE RGBA
    FORMATOPTION  TILED=YES
    EXTENSION "tif"
  END

  OUTPUTFORMAT
    NAME PNG
    DRIVER "GDAL/PNG"
    MIMETYPE "image/png"
    EXTENSION PNG
    IMAGEMODE PC256
    TRANSPARENT ON
  END

  # Legend
  LEGEND
      IMAGECOLOR 255 255 255
    STATUS ON
    KEYSIZE 18 12
    LABEL
      TYPE BITMAP
      SIZE MEDIUM
      COLOR 0 0 0
    END
  END

  # Web interface definition. Only the template parameter
  # is required to display a map. See MapServer documentation
  WEB
    # Set IMAGEPATH to the path where MapServer should
    # write its output.
    IMAGEPATH '/tmp/'

    # Set IMAGEURL to the url that points to IMAGEPATH
    # as defined in your web server configuration
    IMAGEURL '/tmp/'

    # WMS server settings
    METADATA
      'wms_title'           '${dsname}'
      'wms_onlineresource'  '${wms}?SERVICE=WMS'
      'wms_srs'             '${wms_srs}'
      "ows_enable_request"   "*"
    END

  END

  SYMBOL
    NAME "${www}/kml/images/hi.png"
    TYPE PIXMAP
    IMAGE "../images/hi.png"
  END

  SYMBOL
    NAME "${www}/kml/images/lo.png"
    TYPE PIXMAP
    IMAGE "../images/lo.png"
  END

END

EOF

}
