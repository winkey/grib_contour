#!/bin/bash

#plottype feed_name  our_name interval time_valid extra_args dependancys

# for site type
# * 7 * * * /usr/local/bin/generic_contour "" 06 "" "" "" nam_firewx_hires


path="$1"
run="$2"
hour="$3"
prod="$4"
level="$5"
config="$6"
tmp="/tmp"



source @PKGDATADIR@/${config}.config.sh
source @bindir@/generic2.sh

if [[ "$level" == "0" ]]
then
    level=""
fi

##### remove leading 0's, this also fixes "" #####

hour=$((10#${hour}))




################################################################################
# fixme list
#
# other scripts need to know what level "" is
#
# sometime the time a frame is valid for changes, for instance there is more gfs
# Frames we just dont build them, but it goes from 3 to 6 hour intervals after a
# week
#
# this assumes only 1 dep WE NREED TO REWRITE FOR THE FUTURE
#
# the diff scripts realy wont work without a hardcoded hack like with thickness
#
# fixme what if its a huge grib with multiple messages
################################################################################

################################################################################
#
# @brief function to remove the extra spaces from the product map
#
#

################################################################################

generic_clean_prodmap () {

    awk  '
BEGIN {
    FS=OFS=","
} {
    for (i=1 ; i<=NF ; i++)
        gsub(/^[ \t]*|[ \t]*$/,"",$i)};
        1
'

}

################################################################################
# function to figure out the time a frame is valid for
################################################################################

#FIXME this dont work with a single time onky ie "03"

validtime() {
    local curent = "$1"
    local validmap = "$2"

    local til
    local length

    while read til length
    do
        if ((curent <= til))
        then
            break
        fi
    done < <(tr "|" "\n" <<< "$validmap")

    echo "$length"

    if ((curent > til))
    then
        return 1
    fi
}

################################################################################
# function 
################################################################################

generic_deps_match() {

    local plottype = "$1"
    local path_a = "$2"
    local path_b = "$3"
    local name = "$4"
    local msg_a = "$5"
    local msg_b = "$6"
    local interval = "$7"
    local hour = "$8"
    local incr = "$9"
    local extra = "${10}"

    case "$plottype" in
        andplot)
            andplot  "$path_a" "$path_b" "${level}${our_n}" "$msg_a" "$msg_b"\
                     $interval $hour "$incr" "$extra"
            ;;
        windplot)
            windplot "$path_a" "$path_b" "${level}${our_n}" "$msg_a" "$msg_b"\
                     $interval $hour "$incr" "$extra"
            ;;
        diffplot)
            diffplot "$path_a" "$path_b" "${level}${our_n}" "$msg_a" "$msg_b"\
                     $interval $hour "$incr" "$extra"
            ;;
        *)
            ;;
    esac

}

################################################################################
# function 
################################################################################

generic_nodeps() {

    local plottype = "$1"
    local path = "$2"
    local name = "$3"
    local msg_a = "$4"
    local msg_b = "$5"
    local interval = "$6"
    local hour = "$7"
    local incr = "$8"
    local extra = "$9"

    case "$plottype" in
        plot)
            plot "$path" "${level}$our_n" "$msg_a" $interval $hour "$incr"  "$extra"
            ;;
        windplot)
            windplot "$path" "$path" "${level}wind" "$msg_a" "$msg_a" $interval $hour "$incr" "$extra"
            ;;
        *)
            ;;
    esac
}

################################################################################
# function 
################################################################################

generic_string_sub() {
    local string = "$1"
    local search = "$2"
    local replace = "$3"

    echo "${string/${search}/${replace}}"

}
################################################################################
# main
################################################################################

do_generic() {


    local num_matches=0
    local num_depmatches=0
    
    local plottype 
    local feed_n 
    local our_n 
    local interval 
    local validmap 
    local extra 
    local deps

    ##### loop over the product map #####


    while IFS=',' read plottype feed_n our_n interval validmap extra deps
    do

        incr=$(validtime "$hour" "$validmap")

        ##### product match? #####

        if [[ "$feed_n" == "$prod" ]]
        then

            ##### hard code in a thickness fix #####

            if [[ "$our_n" == "thk" ]]
            then
                ##### plot thickness #####
    
                if [[ "$level" == "1000" ]]
                then

                    local lev_n
                    local lev_fn
                    while read lev_n lev_fn
                    do 
                        ##### skip self #####

                        if [[ "$lev_n" == "1000" ]]
                        then
                            continue;
                        fi

                        ##### do we have the dep yet? #####

                        ppath="$(generic_string_sub "$path" "HGHT.1000" "HGHT.${lev_n}")"
                        if [[ -f "$ppath" ]]
                        then
                            generic_deps_match "$plottype" "$path" "$ppath" "${level}" \
                                               "$our_n" 1.0 1.0 "$interval" "$hour" \
                                               "$incr" "$extra"
                        fi
                    done <<< "$levels"

                else 

                    ##### do we have the dep yet? #####

                    ppath="$(generic_string_sub "$path" "HGHT.${level}" "HGHT.1000")"
                    if [[ -f "$ppath" ]]
                    then
                        generic_deps_match "$plottype" "$ppath" "$path" "${level}" \
                                           "$our_n" 1.0 1.0 "$interval" "$hour" \
                                           "$incr" "$extra"
                    fi

                fi

            ##### does it have any deps? #####

            elif [ -n "$deps" ]
            then

                ##### do we have the dep yet? #####

                ppath="$(generic_string_sub "$path" "${prod}" "${deps}")"
                if [[ -f "$ppath" ]]
                then

                    generic_deps_match "$plottype" "$path" "$ppath" "${level}$our_n" \
                                       1.0 1.0 "$interval" "$hour" \
                                       "$incr" "$extra"

                fi

                ##### fixme is it safe to delete both files? #####

            ##### no deps #####

            else

                ##### fixme what if its a huge grib with multiple messages #####

                generic_nodeps "$plottype" "$path" "${level}$our_n" \
                               1.0 1.0 "$interval" "$hour" \
                               "$incr" "$extra"

                ##### fixme does anything else need this file? #####

            fi

        ##### does the dep match? #####

        elif [[ "$deps" == "$prod" ]]
        then
            ppath="$(generic_string_sub "$path" "${prod}" "${feed_n}")"
            if [[ -f "$ppath" ]]
            then
                generic_deps_match "$plottype" "$ppath" "$path" "${level}$our_n" \
                                   1.0 1.1 "$interval" "$hour" \
                                   "$incr" "$extra"
            fi
        fi



    done < <(  generic_clean_prodmap <<< "$prodmap" )

}

################################################################################
#
# @brief Fuction deal with gribs downloaded from a site
#
################################################################################

dofile () {

    local lev_n
    local lev_fn
    while read lev_n lev_fn
    do
        local prod_n 
        local prod_fn
        local ref="products$lev_n"
        while read prod_n prod_fn
        do

            while read IFS=',' plottype feed_n our_n interval validmap extra deps
            do

                if [[ "$prod_n" != "$our_n" ]]
                then
                    continue;
                fi

                incr=$(validtime "$hour" "$validmap")
                msg=$(findingrib "$path" "$feed_n" "$lev_n")

                ##### hard code in a thickness fix #####

                if [[ "$our_n" == "thk" ]]
                then
                    ##### plot thickness #####

                    if [[ $level == 1000 ]]
                    then
                        thick "$plottype" "$feed_n" "$our_n" "$interval" "$incr" "$extra" "$deps" 925
                        thick "$plottype" "$feed_n" "$our_n" "$interval" "$incr" "$extra" "$deps" 850
                        thick "$plottype" "$feed_n" "$our_n" "$interval" "$incr" "$extra" "$deps" 700
                        thick "$plottype" "$feed_n" "$our_n" "$interval" "$incr" "$extra" "$deps" 500
                    else
                        if [[ $level == 925 || $level == 850 || $level == 700 || $level == 500 ]]
                        then

                            thick2 "$plottype" "$feed_n" "$our_n" "$interval" "$incr" "$extra" "$deps" $level
                        fi
                    fi

                ##### does it have any deps? #####

                elif [ -n "$deps" ]
                then
                    depmsg=$(findingrib "$path" "$deps" "$lev_n")

                    generic_deps_match "$plottype" "$path" "$path" "${level}$our_n" \
                                       "$msg" "$depmsg" "$interval" \
                                       "$hour" "$incr" "$extra"

                ##### no deps #####

                else

                    generic_nodeps "$plottype" "$path" "${level}$our_n" \
                                   "$msg" 1.1 "$interval" "$hour" \
                                   "$incr" "$extra"

                fi

            done < <( generic_clean_prodmap <<< "$prodmap" )
        done <<< "${!ref}"
    done <<< "$levels"$'\n'"$levels2"

}


################################################################################
#
# @brief function to loop over the files when fetching from a site
#
################################################################################

do_fromsite() {


    ##fixme this assumes 2 digit hours only

    local til
    local length
    
    ##note hour is a global
    ((hour=0))

    while read til length
    do
        til = ${til#0}
        length = ${length#0}
        
        for (( ; hour < til ; hour += length ))
        do
        
            local hour2 = $(printf "%02d\n" $hour)

            local date8=$(date -d "$run GMT" "+%Y%m%d%H" -u)

            local gribdir = "$( percentsub "$date8" "$run" "$hour2" <<< "$baseurl")"
            local gribfile = "$( percentsub "$date8" "$run" "$hour2" <<< "$pattern")"

            ##### notee path is a global #####
            path = "${tmp}/${gribfile}"

            if getgrib "$gribdir" "$gribfile" "${tmp}"
            then
                
                dofile

                rm -f "$path"

            fi
        done
    done <<<"$hours"


}









if [ -n "$baseurl" ]
then

    do_fromsite "$@"
else
    do_generic "$@" 2>> /tmp/gribcontour_log 1>> /tmp/gribcontour_log
fi
