#!/bin/bash

#plottype feed_name  our_name interval time_valid extra_args dependancys



path="$1"
run="$2"
hour="$3"
prod="$4"
level="$5"
config="$6"
tmp="/tmp"



source @PKGDATADIR@/${config}.config.sh
source @bindir@/generic2.sh

if [[ "$level" == "0" ]]
then
    level=""
fi

##### remove leading 0's, this also fixes "" #####

hour=$((10#${hour}))


################################################################################
# fixme list
#
# other scripts need to know what level "" is
#
# sometime the time a frame is valid for changes, for instance there is more gfs
# Frames we just dont build them, but it goes from 3 to 6 hour intervals after a
# week
#
# this assumes only 1 dep WE NREED TO REWRITE FOR THE FUTURE
#
# the diff scripts realy wont work without a hardcoded hack like with thickness
#
# fixme what if its a huge grib with multiple messages
################################################################################


thick() {
    local plottype="$1"
    local feed_n="$2"
    local our_n="$3"
    local interval="$4"
    local incr="$5"
    local extra="$6"
    local deps="$7"
    local tlevel="$8"

    ppath="${path/HGHT.1000/HGHT.${1}}"
    if [[ -f $ppath ]]
    then

        diffplot "$ppath" "$path" "${tlevel}${our_n}" 1 1 $interval $hour "$incr" "$extra"
        
    fi
}

thick2() {
    local plottype="$1"
    local feed_n="$2"
    local our_n="$3"
    local interval="$4"
    local incr="$5"
    local extra="$6"
    local deps="$7"
    local tlevel="$8"

    ppath="${path/HGHT.${1}/HGHT.1000}"
    if [[ -f $ppath ]]
    then

        diffplot "$path" "$ppath" "${tlevel}${our_n}" 1 1 $interval $hour "$incr" "$extra"
        
        
    fi
}

################################################################################
# function to figure out the time a frame is valid for
################################################################################

validtime() {
    curent="$1"
    validmap="$2"
    
    while read til length
    do
        if ((curent <= til))
        then
            break
        fi
    done <<< $(tr "|" "\n" <<< "$validmap")

    echo "$length"

    if ((curent > til))
    then
        return 1
    fi
}
 

################################################################################
# main
################################################################################

do_generic() {


    local num_matches=0
    local num_depmatches=0
    
    local plottype 
    local feed_n 
    local our_n 
    local interval 
    local validmap 
    local extra 
    local deps

    ##### loop over the product map #####


    while IFS=',' read plottype feed_n our_n interval validmap extra deps
    do

        incr=$(validtime "$hour" "$validmap")

        ##### product match? #####

        if [[ "$feed_n" == "$prod" ]]
        then
            
            ##### hard code in a thickness fix #####
            
            if [[ "$our_n" == "thk" ]]
            then
                ##### plot thickness #####
    
                if [[ $level == 1000 ]]
                then
                    thick "$plottype" "$feed_n" "$our_n" "$interval" "$incr" "$extra" "$deps" 925
                    thick "$plottype" "$feed_n" "$our_n" "$interval" "$incr" "$extra" "$deps" 850
                    thick "$plottype" "$feed_n" "$our_n" "$interval" "$incr" "$extra" "$deps" 700
                    thick "$plottype" "$feed_n" "$our_n" "$interval" "$incr" "$extra" "$deps" 500
                else
                    if [[ $level == 925 || $level == 850 || $level == 700 || $level == 500 ]]
                    then
            
                        thick2 "$plottype" "$feed_n" "$our_n" "$interval" "$incr" "$extra" "$deps" $level
                    fi
                fi
            
            ##### does it have any deps? #####

            elif [ -n "$deps" ]
            then

                ##### do we have the dep yet? #####

                ppath=$(echo "$path" | sed "s/${prod}/${deps}/")
                if [[ -f "$ppath" ]]
                then


                    case "$plottype" in
                        andplot)
                            andplot "$path" "$ppath" "${level}$our_n" 1.0 1.0 $interval $hour "$incr" "$extra"
                            ;;
                        windplot)
                            windplot "$path" "$ppath" "${level}${our_n}" 1.0 1.0 $interval $hour "$incr" "$extra"
                            ;;
                        diffplot)
                            diffplot "$path" "$ppath" "${level}${our_n}" 1 1 $interval $hour "$incr" "$extra"
                            ;;
                        *)
                            ;;
                    esac
                fi
                ##### fixme is it safe to delete both files? #####
            
            ##### no deps #####

            else

                ##### fixme what if its a huge grib with multiple messages #####
    

                case "$plottype" in
                    plot)
                        plot "$path" "${level}$our_n" 1 $interval $hour "$incr"  "$extra"
                        ;;
                    windplot)
                        windplot "$path" "$path" "${level}wind" 1.0 1.1 $interval $hour "$incr" "$extra"
                        ;;
                    *)
                        ;;
                esac
          
                ##### fixme does anything else need this file? #####

            fi

        ##### does the dep match? #####

        elif [[ "$deps" == "$prod" ]]
        then
            ppath=$(echo "$path" | sed "s/${prod}/${feed_n}/")
            if [[ -f "$ppath" ]]
            then
                
                case "$plottype" in
                    andplot)
                        andplot  "$ppath" "$path" "${level}${our_n}" 1.0 1.0 $interval $hour "$incr" "$extra"
                        ;;
                    windplot)
                        windplot "$ppath" "$path" "${level}${our_n}" 1.0 1.0 $interval $hour "$incr" "$extra"
                        ;;
                    diffplot)
                        diffplot "$ppath" "$path" "${level}${our_n}" 1 1 $interval $hour "$incr" "$extra"
                        ;;
                    *)
                        ;;
                esac
            fi
          fi



    done < <( awk  ' BEGIN { FS=OFS="," } {for (i=1; i<=NF; i++) gsub(/^[ \t]*|[ \t]*$/,"",$i)}; 1' <<< "$prodmap" )


    

}


dofile () {
#
#    path="$1"
#
#    while read lev_n lev_fn
#    do
#
#        while read IFS=',' plottype feed_n our_n interval validmap extra deps
#        do
#            incr=$(validtime "$hour" "$validmap")
#            msg=$(findingrib "$path" "$feed_n" "$lev_n")
#
#            IF [
#            depmsg=$(findingrib "$path" "$feed_n" "$lev_n")
#
#
#            ##### hard code in a thickness fix #####
#            
#            if [[ "$our_n" == "thk" ]]
#            then
#                ##### plot thickness #####
#    
#                if [[ $level == 1000 ]]
#                then
#                    thick "$plottype" "$feed_n" "$our_n" "$interval" "$incr" "$extra" "$deps" 925
#                    thick "$plottype" "$feed_n" "$our_n" "$interval" "$incr" "$extra" "$deps" 850
#                    thick "$plottype" "$feed_n" "$our_n" "$interval" "$incr" "$extra" "$deps" 700
#                    thick "$plottype" "$feed_n" "$our_n" "$interval" "$incr" "$extra" "$deps" 500
#                else
#                    if [[ $level == 925 || $level == 850 || $level == 700 || $level == 500 ]]
#                    then
#            
#                        thick2 "$plottype" "$feed_n" "$our_n" "$interval" "$incr" "$extra" "$deps" $level
#                    fi
#                fi
#            
#            ##### does it have any deps? #####
#
#            elif [ -n "$deps" ]
#            then
#
#                ##### do we have the dep yet? #####
#
#                ppath=$(echo "$path" | sed "s/${prod}/${deps}/")
#                if [[ -f "$ppath" ]]
#                then
#
#
#                    case "$plottype" in
#                        andplot)
#                            andplot "$path" "$ppath" "${level}$our_n" 1.0 1.0 $interval $hour "$incr" "$extra"
#                            ;;
#                        windplot)
#                            windplot "$path" "$ppath" "${level}${our_n}" 1.0 1.0 $interval $hour "$incr" "$extra"
#                            ;;
#                        diffplot)
#                            diffplot "$path" "$ppath" "${level}${our_n}" 1 1 $interval $hour "$incr" "$extra"
#                            ;;
#                        *)
#                            ;;
#                    esac
#                fi
#                ##### fixme is it safe to delete both files? #####
#            
#            ##### no deps #####
#
#            else
#
#                ##### fixme what if its a huge grib with multiple messages #####
#    ..
#
#                case "$plottype" in
#                    plot)
#                        plot "$path" "${level}$our_n" 1 $interval $hour "$incr"  "$extra"
#                        ;;
#                    windplot)
#                        windplot "$path" "$path" "${level}wind" 1.0 1.1 $interval $hour "$incr" "$extra"
#                        ;;
#                    *)
#                        ;;
#                esac
#          
#                ##### fixme does anything else need this file? #####
#
#            fi
#
#            ##### does the dep match? #####
#
#            if [[ "$deps" == "$prod" ]]
#            then
#                ppath=$(echo "$path" | sed "s/${prod}/${feed_n}/")
#                if [[ -f "$ppath" ]]
#                then
#                    
#                    case "$plottype" in
#                        andplot)
#                            andplot  "$ppath" "$path" "${level}${our_n}" 1.0 1.0 $interval $hour "$incr" "$extra"
#                            ;;
#                        windplot)
#                            windplot "$ppath" "$path" "${level}${our_n}" 1.0 1.0 $interval $hour "$incr" "$extra"
#                            ;;
#                        diffplot)
#                            diffplot "$ppath" "$path" "${level}${our_n}" 1 1 $interval $hour "$incr" "$extra"
#                            ;;
#                        *)
#                            ;;
#                    esac
#                    fi
#            fi
#
#            findingrib "$file" "$feed_n" 
#        done <<< "$prodmap"
#
#    done <<< "$levels"$'\n'"$levels2"
 echo
}

do_fromsite() {

#get the file list
#
findingrib

}









if [ -n "$baseurl" ]
then
    do_fromsite "$@"
else
    do_generic "$@"
fi
