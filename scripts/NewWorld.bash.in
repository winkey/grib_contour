#!/bin/bash
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Library General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor Boston, MA 02110-1301,  USA

username='grib_contour'
group='software'
pghost='67.58.51.110'
pguser='atmos'
pgdb='NewWorld'

#NewWorld_uid="NULL"
#NewWorld_gid="NULL"


mypsql() {
    psql -h "$pghost" -U "$pguser" "$pgdb" $@
}

mkuid() {
    
    read sha junk <<< $(dd if=/dev/urandom count=20 bs=1 2> /dev/null | shasum )
    mypsql << EOF

insert into auth_user( 
    username,
    first_name,
    last_name,
    email,
    password,
    is_staff,
    is_active,
    is_superuser,
    last_login,
    date_joined
) VALUES (
    '$username',
    '',
    '',
    '',
    'sha1\$$sha',
    FALSE,
    FALSE,
    FALSE,
    now(),
    now()
);

EOF
}

mkgid() {

    mypsql << EOF

insert into auth_group( name) values ('$group');
EOF

}

addtogroup () {
    
mypsql << EOF
insert into auth_user_groups (
    user_id,
    group_id 
) values ( $1, $2)
EOF
}

is_number() {
    number="$1"

    if ! [ -z "$number" ] && [ $number  == $( bc <<< $number) ]
    then
        true
    else
        false
    fi

}

getuid() {
    mypsql -t -q << EOF
select id from auth_user where username='$username';
EOF

}

getgid() {
    mypsql -t -q << EOF
select id from auth_group where name='$group';
EOF
}



################################################################################
## function to add a folder
# @param layeraray
# @param owner_id    the owner id of this new node (CAN BE NULL)
# @param groups_id   the group id of this new node (CAN BE NULL)
# @param name        the name of the node to add
# @param tooltip
# @param metadata

################################################################################

add_layers_folder() {

    mypsql << EOF

select  layers_add_folder_by_name(array[$1], $2, $3, '$4', '$5', '$6');

EOF
    cat << EOF

select  layers_add_folder_by_name(array[$1], $2, $3, '$4', '$5', '$6');

EOF
}
################################################################################
## function to add a radio folder
# @param layeraray
# @param owner_id    the owner id of this new node (CAN BE NULL)
# @param groups_id   the group id of this new node (CAN BE NULL)
# @param name        the name of the node to add
# @param tooltip
# @param metadata

################################################################################

add_layers_radio() {

    mypsql << EOF

    select  layers_add_radio_by_name(array[$1], $2, $3, '$4', '$5', '$6');
    

EOF
}

################################################################################
## function to add a animation folder
# @param layeraray
# @param owner_id    the owner id of this new node (CAN BE NULL)
# @param groups_id   the group id of this new node (CAN BE NULL)
# @param name        the name of the node to add
# @param tooltip

################################################################################

add_layers_animation() {

    mypsql << EOF

    select  layers_add_animation_by_name(array[$1], $2, $3, '$4', '$5', '$6' );
    

EOF
}

################################################################################
## function to add a link folder
# @param layeraray
# @param owner_id    the owner id of this new node (CAN BE NULL)
# @param groups_id   the group id of this new node (CAN BE NULL)
# @param name        the name of the node to add
# @param tooltip
# @param metadata
# @param target     an int id

################################################################################

add_layers_link() {

    mypsql << EOF

    select  layers_add_link_by_name(array[$1], $2, $3, '$4', '$5', '$6', $7 );
    

EOF
}


################################################################################
# function to update a link
# @param parent          an aray that describes the parent by name
# @param name        the name of the node to add
# @param tooltip
# @param metadata
# @param target
# @return nothing
################################################################################

update_layers_link() {


    mypsql << EOF

    select  layers_update_link_by_name(array[$1], $2, $3, '$4', $5 );
    

EOF
}

################################################################################
## function to add a wms layer
## @param parent          an aray that describes the parent by name
##  @param owner_id        the owner id of this new node (CAN BE NULL)
##  @param groups_id       the group id of this new node (CAN BE NULL)
##  @param timestamp
##  @param begin_timespan
##  @param end_timespan
##  @param tilecache
##  @param name            the name of the node to add
##  @param tooltip
##  @param metadata
##  @param url                  ,
##  @param layers               ,
##  @param format               ,
##  @param transparency         ,
##  @param opacity              ,
##  @param singleTile           ,
##  @param attribution          ,
##  @param isBaseLayer          ,
##  @param gutter 

##  @return nothing
################################################################################

add_layers_wms() {

    mypsql << EOF

select  layers_add_wms_by_name( 
    array[$1], $2, $3, $4, $5, $6, $7, '$8', '$9', '${10}', '${11}', '${12}',
    '${13}', ${14}, ${15}, ${16}, '${17}', ${18}, ${19} 
);
    
EOF

    cat << EOF

select  layers_add_wms_by_name( 
    array[$1], $2, $3, $4, $5, $6, $7, '$8', '$9', '${10}', '${11}', '${12}',
    '${13}', ${14}, ${15}, ${16}, '${17}', ${18}, ${19} 
);
    
EOF

}

################################################################################
## function to delete a folders contents recursively by name


layers_delete_all_contents_by_name() {

    mypsql << EOF

    select  layers_delete_all_contents_by_name( array[$1]);
EOF
}

layers_search() {
    mypsql -t -q << EOF
select search_layers( array[$1], $2 );
EOF

}

#mktree()

layers_exist_by_name() {
    layers_search "$1" "$2" |\
     sed 's/[ (,)]*//g' |\
     grep -q -E '^.+$'

}

layers_get_id_by_name() {

    mypsql -t -q <<< "select id from search_layers( array[$1], $2 );" |\
     sed 's/ //g' |\
     grep -e [0-9] |\
     head -n 1

}


###############################################################################
## @brief 
##
## @param prod  the name of the product ie: 925hgt
## @param year
## @param month
##
## @details
## global vars
## @param run       the run of the model "00"
###############################################################################

mkrootNewWorld() {
    local prod="$1"
    local year="$2"
    local month="$3"

    if [ -n "$DEBUG" ]
    then
        printf "mkrootNewWorld\n prod=%s\n year=%s\n month=%s\n" \
               "$prod"\
               "$year"\
               "$month" 
    fi

    #perhaps check if the tree exssists
    #create the tree?

    local tree=$(get_tree "$prod")
    
    ##### year and month archive folders #####

    layers_exist_by_name "$tree, 'Archive', '$year'" 0 ||\
        add_layers_folder "$tree, 'Archive'" "$NewWorld_uid" "$NewWorld_gid" "$year" "$year" ""

    layers_exist_by_name "$tree, 'Archive', '$year', '$month'" 0 ||\
        add_layers_folder "$tree, 'Archive', '$year'" "$NewWorld_uid" "$NewWorld_gid" "$month" "$month" ""

    ###### add the animation folder #####

    local mydate=$(date -d "$run GMT" "+%Y-%m-%d" -u)

    layers_exist_by_name "$tree, 'Archive', '$year', '$month', '$mydate ${run}z'" 0 ||\
        add_layers_animation "$tree, 'Archive', '$year', '$month'" "$NewWorld_uid" "$NewWorld_gid" "$mydate ${run}z" "$mydate ${run}z" ""

    local id=$( layers_get_id_by_name "$tree, 'Archive', '$year', '$month', '$mydate ${run}z'" 0 )

    ##### add the link #####

    if ! layers_exist_by_name "$tree, '$mydate ${run}z'" 0
    then
        add_layers_link "$tree" "$NewWorld_uid" "$NewWorld_gid" "$mydate ${run}z" "$mydate ${run}z" "" $id

        ##### mod existing #####

    else
        update_layers_link "$tree" "$NewWorld_uid" "$NewWorld_gid" "$mydate ${run}z" "$mydate ${run}z" $id
    fi

}

###############################################################################
## @brief function to add the new framre to the NewWorld Animation
##
## @param prod  the name of the product ie: 925hgt
## @param hr    the forcast hour in the run
## @param incr  how many hours apart the frames are
## @param grid  optional name to prefix onto the kml name
##
## @details
## global vars
## @param wwwdisk   the base web dir to write to "/var/www/html/"            
## @param run       the run of the model "00"
## @param www       the base url for the website
## @param name    name of the dataset
##
###############################################################################

appendNewWorld () {

    local prod="$1"
    local hr="$2"
    local incr="$3"
    local grid="$4"

    if [ -n "$DEBUG" ]
    then
        printf "appendNewWorld\n prod=%s\n hr=%s\n incr=%s\n grid=%s\n" \
               "$prod" \
               "$hr" \
               "$incr "\
               "$grid"
    fi

    local frames="${wwwdisk}/kml/${name}/${run}/${prod}.kml"

    ##### get the uid and add the user if nessasary #####

    NewWorld_uid=$(getuid | tr -d '[[:space:]]')

    if is_number "$NewWorld_uid"
    then
        echo
    else
        mkuid
        NewWorld_uid=$(getuid)
        NewWorld_uid=$(getuid | tr -d '[[:space:]]')
    fi

    ##### get the gid and add the group if nessasary #####

    NewWorld_gid=$(getgid | tr -d '[[:space:]]')
    if is_number "$NewWorld_gid"
    then
        echo
    else
        mkgid
        NewWorld_gid=$(getgid | tr -d '[[:space:]]')
        addtogroup  "$NewWorld_uid" "$NewWorld_gid"
    fi


    ##### lock the file #####
    
    local lock="$locdir/$script.$name.$run.$prod.pg.lock"
    while ! mkdir "$lock" > /dev/null
    do
        sleep 1
    done
    
    ##### get the base tree path for this layer #####

    local tree=$(get_tree "$prod")

    ##### get the year and month of this run #####

    local year=$(date -d "$run GMT $hr hours" "+%Y" -u)
    local month=$(date -d "$run GMT $hr hours $incr hours" "+%m" -u)
    local mydate=$(date -d "$run GMT" "+%Y-%m-%d" -u)

    ##### if the map folder dont exsist, make it #####

    if ! layers_exist_by_name "$tree, 'Archive', '$year', '$month', '$mydate ${run}z'" 0
    then
        mkrootNewWorld "${prod}" "$year" "$month"
    fi
    
    ##### add the layer to the folder #####

    add_layers_wms  "$tree, 'Archive', '$year', '$month', '$mydate ${run}z'" \
                    $NewWorld_uid \
                    $NewWorld_gid \
                    "NULL" \
                    "TIMESTAMP WITH TIME ZONE '$(date -d "$run GMT $hr hours" "+%FT%TZ" -u)'" \
                    "TIMESTAMP WITH TIME ZONE '$(date -d "$run GMT $hr hours $incr hours" "+%FT%TZ" -u)'" \
                    "TRUE" \
                    "${prod}${hr}" \
                    "" \
                    "" \
                    "${www}/cgi-bin/${name}_wms?HOUR=${hr}&RUN=$(date -d "$run GMT" "+%Y%m%d" -u)${run}" \
                    "$prod" \
                    "image/png" \
                    "TRUE" \
                    100.0 \
                    "TRUE" \
                    "<img src="${www}/kml/images/${prod}.png" />" \
                    "FALSE" \
                    0


    ##### RM THE LOCK #####

    rmdir "$lock"
}

##############################################################################
## @brief function to figure out the array to pass to postgres that descripes a
##  location ibn the layer tree
##
## @param prod  the name of the product ie: 925hgt


###############################################################################

get_tree_archive() {
    local prod="$1"

    local level=${prod%%[^0-9]*}
    
    local prod_fn=$(getprod_fn "$prod")
    local lev_fn=$(getlev_fn "$prod")
    local run_fn=$(getrun_fn "$run")

    local tree


    if [ -n "$lev_fn" ]
    then
        tree="'weather', '$name', '$lev_fn', '$prod_fn', 'Archive'"

    else
        tree="'weather', '$name', '$prod_fn', 'Archive'"
    fi

    echo "$tree"
}


###############################################################################
## @brief function to figure out the array to pass to postgres that descripes a
##  location ibn the layer tree
##
## @param prod  the name of the product ie: 925hgt

## @details global
## @param run       the run of the model "00"

###############################################################################

get_tree() {
    local prod="$1"

    local level=${prod%%[^0-9]*}
    
    local prod_fn=$(getprod_fn "$prod")
    local lev_fn=$(getlev_fn "$prod")
    local run_fn=$(getrun_fn "$run")

    local tree


    if [ -n "$lev_fn" ]
    then
        tree="'LayerTree', 'weather', '$name', '$lev_fn', '$prod_fn'"

    else
        tree="'LayerTree', 'weather', '$name', '$prod_fn'"
    fi

    echo "$tree"
}
################################################################################
# function to get the product fullname from input like 450t
################################################################################

getrun_fn() {

    local run="$1"
    
    while read run_n run_fn
    do
        if [[ "$run_n" == "$run" ]]
        then
            echo "$run_fn"
            return
        fi
    done <<< "$times"


    ##### if we get here theres an error #####

    return 1
}

################################################################################
# function to get the product fullname from input like 450t
################################################################################

getlev_fn() {
    local prod="$1"
    local level="${prod%%[^0-9]*}"
    
    if [ -n "$level" ]
    then
        while read lev_n lev_fn
        do
            if [[ "$lev_n" == "$level" ]]
            then
                echo "$lev_fn"
                return
            fi
        done <<< "$levels"
    elif [ -n "$levels2" ]
    then
        while read lev_n lev_fn
        do
            # for now there can be no match we just return the first one
            #if [[ "$lev_n" == "$level" ]]
            #then
                echo "$lev_fn"
                return
            #fi
        done <<< "$levels2"

    else

        return
    fi


    ##### if we get here theres an error #####

    return 1
}


################################################################################
# function to get the product fullname from input like 450t
################################################################################

getprod_fn() {

    local prod="$1"
    local level="${prod%%[^0-9]*}"
    local prod_n
    local prod_fn

    if [ -n "$level" ]
    then
        prod="${prod##*[0-9]}"

        ref="products$level"
        while read prod_n prod_fn
        do
            if [[ "$prod_n" == "$prod" ]]
            then
                echo "$prod_fn"
                return
            fi
        done <<< "${!ref}"
        
    elif [ -n "$levels2" ]
    then
        while read prod_n prod_fn
        do
            if [[ "$prod_n" == "$prod" ]]
            then
                echo "$prod_fn"
                return
            fi
        done <<< "$products2"

    elif [ -n "$products" ]
    then
        while read prod_n prod_fn
        do
           if [[ "$prod_n" == "$prod" ]]
            then
                echo "$prod_fn"
                return
            fi
        done <<< "$products"
    fi

    ##### if we get here theres an error #####

    return 1
}



