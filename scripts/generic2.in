#!/bin/bash
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Library General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor Boston, MA 02110-1301,  USA

if [ -f "/etc/profile" ]
then
    source "/etc/profile"
fi

if [ -f "~/.profile" ]
then
    source "~/.profile"
fi

locdir=/tmp

DEBUG=true  #comment out to turn off

source @bindir@/kml.bash
source @bindir@/NewWorld.bash
source @bindir@/mapfile.bash

export PATH="$PATH:@bindir@"

script=$(basename ${0})

if [ "$2" == "" ]
then
    datee=`date -u "+%Y%m%d"`
else
    datee=$2
fi

##### make the run dir #####
#fixme should this go in a func?
mydate=$(date -d "$run GMT" "+%Y%m%d" -u)
if [[ ! -d "${wwwdisk}/kml/${name}/${mydate}${run}" ]]
then

    mkdir -p "${wwwdisk}/kml/${name}/${mydate}${run}"
fi

##### get the number of cpu's #####

cpus=$(cat /proc/cpuinfo | grep "^processor" | wc -l)

################################################################################
#
# function to proccess a list of jobs
#
# 

function do_jobs {

    for job in "${joblist[@]}"
    do
        while [[ $(jobs | wc -l) -ge $cpus ]]
        do
            sleep 2
        done
    
        $job &
    done

}
    
################################################################################
#    function to make a dir for the temporary files
#
#    args:
#                    $1    the dir to create
################################################################################

function mktempfiledir {
    if [ -d "$1" ]
    then
        rm -r "$1"
    else
        mkdir "$1"
    fi
}




################################################################################
#    function to make a fifo
#
#    args:
#                    $1    the filename of the fifo
#
################################################################################

function my_mkfifo {
    if [ -p "$1" ]
    then 
        rm "$1"
    fi
    mknod "$1" p
}

###############################################################################
## @brief function to plot the data
##
## @param gribfile  full path to the grib file to plot
## @param prod      name of the product ie: 925hgt
## @param gribmsg   the grib msg #
## @param interval  interval apart the contours are
## @param timee     the forcast hour in the run
## @param incr      how many hours apart the frames are
## @param extra     extra args to pass to grib_contour
##
## @details
## global vars
## @param wwwdisk   the base web dir to write to "/var/www/html/"
## @param run       the run of the model "00"
## @param name    name of the dataset
##
###############################################################################

plot () {
    local gribfile=$1
    local prod="$2"
    local grbmsg=$3
    local interval=$4
    local timee=$5
    local incr=$6
    local extra="$7"

    if [ -n "$DEBUG" ]
    then
        printf "plot\n gribfile=%s\n prod=%s\n grbmsg=%s\n interval=%s\n timee=%s\n incr=%s\n extra=%s\n" \
               "$gribfile" \
               "$prod "\
               "$grbmsg" \
               "$interval" \
               "$timee" \
               "$incr" \
               "$extra"
    fi
         
    local mydate=$(date -d "$run GMT" "+%Y%m%d" -u)
    local zip="${wwwdisk}/kml/${name}/${mydate}${run}/${prod}${timee}.kmz"
    local kml="${prod}${timee}.kml"
    
    
    grib_contour -g "${gribfile}" \
                 -m "$grbmsg" \
                 -i "$interval" -s "$prod" \
                 -k "$kml" -z "$zip" \
                 $extra
    
    appendkml "$prod" "$timee" "$incr" "$grid"
    appendNewWorld "$prod" "$timee" "$incr" "$grid"
    appendmapfile "$prod" "$zip"
    
}

###############################################################################
## @brief function to plot the wind data
##
## @param ufile     full path to the u grib file to plot
## @param vfile     full path to the u grib file to plot
## @param prod      name of the product ie: 925hgt
## @param umsg      the u grib msg #
## @param vmsg      the v grib msg #
## @param interval  interval apart the contours are
## @param timee     the forcast hour in the run
## @param incr      how many hours apart the frames are
## @param extra     extra args to pass to grib_contour
##
## @details
## global vars
## @param wwwdisk   the base web dir to write to "/var/www/html/"
## @param run       the run of the model "00"
## @param name    name of the dataset
##
###############################################################################

windplot () {
    local ufile="$1"
    local vfile="$2"
    local prod="$3"
    local umsg=$4
    local vmsg=$5
    local interval=$6
    local timee=$7
    local incr=$8
    local extra="$9"

    if [ -n "$DEBUG" ]
    then
        printf "windplot\n ufile=%s\n vfile=%s\n prod=%s\n umsg=%s\n vmsg=%s\n interval=%s\n timee=%s\n incr=%s\n extra=%s\n" \
               "$ufile" \
               "$vfile" \
               "$prod "\
               "$umsg" \
               "$vmsg" \
               "$interval" \
               "$timee" \
               "$incr" \
               "$extra"
    fi

    local mydate=$(date -d "$run GMT" "+%Y%m%d" -u)
    local zip="${wwwdisk}/kml/${name}/${mydate}${run}/${prod}${timee}.kmz"
    local kml="${prod}${timee}.kml"
    
    grib_contour -w -u "${ufile}" -v "${vfile}" \
                    -U "$umsg" -V "$vmsg" \
                    -i "$interval" -s "$prod" \
                    -k "$kml" -z "$zip" \
                    $extra
    
    appendkml "$prod" "$timee" "$incr" "$grid"
    appendNewWorld "$prod" "$timee" "$incr" "$grid"
    appendmapfile "$prod" "$zip"

}

###############################################################################
## @brief function to plot 2 gribs and'ed together
##
## @param ufile     full path to the u grib file to plot
## @param vfile     full path to the u grib file to plot
## @param prod      name of the product ie: 925hgt
## @param umsg      the u grib msg #
## @param vmsg      the v grib msg #
## @param interval  interval apart the contours are
## @param timee     the forcast hour in the run
## @param incr      how many hours apart the frames are
## @param extra     extra args to pass to grib_contour
##
## @details
## global vars
## @param wwwdisk   the base web dir to write to "/var/www/html/"
## @param run       the run of the model "00"
## @param name    name of the dataset
##
###############################################################################

andplot () {
    local ufile="$1"
    local vfile="$2"
    local prod="$3"
    local umsg=$4
    local vmsg=$5
    local interval=$6
    local timee=$7
    local incr=$8
    local extra="$7"
    
    if [ -n "$DEBUG" ]
    then
        printf "windplot\n ufile=%s\n vfile=%s\n prod=%s\n umsg=%s\n vmsg=%s\n interval=%s\n timee=%s\n incr=%s\n extra=%s\n" \
               "$ufile" \
               "$vfile" \
               "$prod "\
               "$umsg" \
               "$vmsg" \
               "$interval" \
               "$timee" \
               "$incr" \
               "$extra"
    fi

    local mydate=$(date -d "$run GMT" "+%Y%m%d" -u)
    local zip="${wwwdisk}/kml/${name}/${mydate}${run}/${prod}${timee}.kmz"
    local kml="${prod}${timee}.kml"
    
    grib_contour -a -u "${ufile}" -v "${vfile}" \
                    -U "$umsg" -V "$vmsg" \
                    -i "$interval" -s "$prod" \
                    -k "$kml" -z "$zip" \
                    $extra
    
    appendkml "$prod" "$timee" "$incr" "$grid"
    appendNewWorld "$prod" "$timee" "$incr" "$grid"
    appendmapfile "$prod" "$zip"
    
}

###############################################################################
## @brief function to plot 2 gribs 1 subtracted from the other
##
## @param ufile     full path to the u grib file to plot
## @param vfile     full path to the v grib file to plot
## @param prod      name of the product ie: 925hgt
## @param umsg      the u grib msg #
## @param vmsg      the v grib msg #
## @param interval  interval apart the contours are
## @param timee     the forcast hour in the run
## @param incr      how many hours apart the frames are
## @param extra     extra args to pass to grib_contour
##
## @details
## global vars
## @param wwwdisk   the base web dir to write to "/var/www/html/"
## @param run       the run of the model "00"
## @param name    name of the dataset
##
###############################################################################

diffplot () {
    local ufile="$1"
    local vfile="$2"
    local prod="$3"
    local umsg=$4
    local vmsg=$5
    local interval=$6
    local timee=$7
    local incr=$8
    local extra="$9"
    
    if [ -n "$DEBUG" ]
    then
        printf "windplot\n ufile=%s\n vfile=%s\n prod=%s\n umsg=%s\n vmsg=%s\n interval=%s\n timee=%s\n incr=%s\n extra=%s\n" \
               "$ufile" \
               "$vfile" \
               "$prod "\
               "$umsg" \
               "$vmsg" \
               "$interval" \
               "$timee" \
               "$incr" \
               "$extra"
    fi

    local mydate=$(date -d "$run GMT" "+%Y%m%d" -u)
    local zip="${wwwdisk}/kml/${name}/${mydate}${run}/${prod}${timee}.kmz"
    local kml="${prod}${timee}.kml"
    
    if [[ -f "$zip" ]]
    then
        rm "$zip"
    fi
    
    grib_contour -d -u "${ufile}" -v "${vfile}" \
                    -U "$umsg" -V "$vmsg" \
                    -i "$interval" -s "$prod" \
                    -k "$kml" -z "$zip" \
                    $extra
    
    appendkml "$prod" "$timee" "$incr" "$grid"
    appendNewWorld "$prod" "$timee" "$incr" "$grid"
    appendmapfile "$prod" "$zip"

}
 

###############################################################################
## @brief function to fetch the grib file
##
## @arg dir     the site and path
## @arg file    the filename
## @arg ddir    destination dir
##
###############################################################################

getgrib () {
    local dir=$1
    local file=$2
    local ddir=$3
    
    wget "${dir}${file}" -O "${ddir}/${file}"
}

###############################################################################
## @brief find a product in a grib file
##
## @arg file    the path and ilename
## @arg prod    product name
## @arg level   product level
###############################################################################

findingrib() {
    local file="$1"
    local prod="$2"
    local level="$3"


    degrib -in "$file" -I |\
     awk -v prod="$prod" \
         -v level="$level" \
         -F '"*, "*' \
         '(($4 ~ "^" prod ) && ($5 ~ "^" level )) { print $1 ; exit}'


}

percentsub() {

    awk -v date8="$1" \
        -v run2="$2" \
        -v hour2="$3" \
        '{
            sub( /%date8%/, date8);
            sub( /%run2%/, run2);
            sub( /%hour2%/, hour2);
            print
        }'

}



